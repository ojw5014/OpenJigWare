using System;
using System.Collections.Generic;
//using System.Linq;
using System.Text;
using System.Drawing;
using System.IO;
using System.Diagnostics;
using System.Threading;
using System.Windows.Forms;

namespace OpenJigWare
{
    partial class Ojw
    {
        // if you make your class, just write in here
        public class CPython
        {
            public string ReturnStr(string strRet)
            {
                Ojw.CInputBox.Show("test", "kkk", ref strRet);
                return strRet;
            }

            private int m_nThread = 0;
            public void Run_by_FileName(string strFileName, bool bSocket = false)
            {
                if (m_nThread > 0) return;

                m_nThread = 1;

                m_strFileName_For_Run_Python = strFileName;
                m_thRun = new Thread(new ThreadStart(thRun));
                m_thRun.Start();

            }
            private Thread m_thRun;
            public string m_strFileName_For_Run_Python = "";
            public void Run(string strPythonCode, bool bSocket = false)
            {
                if (m_nThread > 0) return;

                m_nThread = 2;
                // Writing Python code to a file
                //string pathToPythonFile = "__OJW__test__.py";
                m_strFileName_For_Run_Python = "__OJW__test__.py";
                File.WriteAllText(m_strFileName_For_Run_Python, strPythonCode);

                m_thRun = new Thread(new ThreadStart(thRun));
                m_thRun.Start();
            }
            public TextBox m_txtPython = null;
            public void SetTextBox(TextBox txt)
            {
                m_txtPython = txt;
            }
            private int m_nMode = 1; // 0 : normal(스트립트의 전체 실행), 1 : debug mode(스크립트의 각 라인별로 실행)
            public void SetDebugMode(bool bDebug = true) { m_nMode = (bDebug) ? 1 : 0; }
            private List<string> m_lstPythonResult = new List<string>();
            private int m_nSeq_Python = 0;
            private int m_nSeq_Python_Back = 0;
            public bool Is_Result()
            {
                if (m_nSeq_Python != m_nSeq_Python_Back)
                {
                    m_nSeq_Python_Back = m_nSeq_Python;
                    return true;
                }
                return false;
            }
            public string[] GetResult() { if (m_lstPythonResult.Count == 0) return null; return m_lstPythonResult.ToArray(); }
            public string[] WaitResult(int nWaitTime = -1)
            {
                CTimer CTmr = new CTimer();
                CTmr.Set();
                while (true)
                {
                    if (nWaitTime >= 0)
                    {
                        if (CTmr.Get() >= nWaitTime) break;
                    }
                    if (Is_Result() == true) break;
                    CTimer.Wait(1);
                }
                return GetResult();
            }
            private void thRun()
            {
                // Starting a new process to execute the Python script
                var start = new ProcessStartInfo
                {
                    FileName = "python",  // Specify the Python path here if not added in system PATH
                    // -u 인자가 중요하다. 이걸 해야 실제 화면상 출력이 sleep 을 적용해 차근차근 출력 된다.
                    Arguments = string.Format("-u {0} {1}", m_strFileName_For_Run_Python, ""), // Arguments if any
                    UseShellExecute = false,  // Do not use OS shell
                    RedirectStandardOutput = true,  // Any output, generated by application will be redirected back
                    RedirectStandardError = true,  // Any error in standard output will be redirected back
                    CreateNoWindow = true  // Don't create any window
                };

                Is_Result();
                if (m_nMode == 0)
                {
                    using (Process process = Process.Start(start))
                    {
                        m_lstPythonResult.Clear();
                        using (StreamReader reader = process.StandardOutput)
                        {
                            string line;
                            Ojw.printf("====================================\r\n");
                            Ojw.printf("[python]Start ===> \r\n");
                            Ojw.printf("====================================\r\n");
                            while ((line = reader.ReadLine()) != null)  // Real-time reading output of the Python script
                            {
                                //Ojw.printf(line);
                                if (m_txtPython != null)
                                {
                                    Ojw.printf(m_txtPython, line + "\r\n");
                                }
                                else Ojw.printf(line + "\r\n");
                                m_lstPythonResult.Add(line);
                                Thread.Sleep(1);
                            }
                            Ojw.printf("====================================\r\n");
                            Ojw.printf("[python] ===> Done\r\n");
                            Ojw.printf("====================================\r\n");
                        }

                        int nError = 0;
                        string strError = "";
                        using (StreamReader error = process.StandardError)
                        {
                            string line;
                            while ((line = error.ReadLine()) != null)  // Real-time reading error output of the Python script
                            {
                                if (m_txtPython != null)
                                {
                                    Ojw.printf(m_txtPython, line + "\r\n");
                                }
                                else Ojw.printf(line + "\r\n");

                                strError += line + "\r\n";
                                nError++;

                                Thread.Sleep(1);
                            }
                        }

                        if (nError > 0)
                        {
                            Ojw.printf("====================================\r\n");
                            Ojw.printf("[python - Error]Start ===> \r\n");
                            Ojw.printf("====================================\r\n");
                            Ojw.printf(strError);
                            Ojw.printf("====================================\r\n");
                            Ojw.printf("[python - Error] ===> Done\r\n");
                            Ojw.printf("====================================\r\n");
                        }
                    }
                    m_nSeq_Python++;
                    if (m_nThread == 2) File.Delete(m_strFileName_For_Run_Python);
                }
                else
                {

                    using (Process process = Process.Start(start))
                    {


                        // Read the output of the Python script
                        string output = process.StandardOutput.ReadToEnd();

                        // Wait for the process to exit
                        process.WaitForExit();

                        // Print the output
                        //Ojw.Log(output);
                        Ojw.printf(output + "\r\n");
                    }
                    m_nSeq_Python++;
                }
                m_nThread = 0;
            }
        }
    }
}
